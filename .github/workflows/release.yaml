name: release

on:
  release:
    types:
      - published

env:
  GCS_BUCKET: images.metal-pod.io

jobs:
  integration:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Go 1.18
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.x'

    - name: run integration tests
      run: |
        sudo apt install -y --no-install-recommends nftables iproute2 kmod
        sudo modprobe dummy
        sudo ip link add vrf42 type dummy
        sudo ip link add vlan42 type dummy
        export KUBEBUILDER_ASSETS=/usr/local/bin
        sudo "PATH=$PATH" --preserve-env=GOROOT make test-all clean

  build:
    needs: integration
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Go 1.18
      uses: actions/setup-go@v2
      with:
        go-version: '1.18.x'

    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker Login
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_REGISTRY_USER }}
        password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

    - name: Build
      run: |
        make fetch-template

    - name: Lint
      uses: golangci/golangci-lint-action@v2
      with:
        args: -p bugs -p unused --timeout=3m

    - name: Build
      run: |
        make

    - name: Build and Push Docker Image
      run: |
        export GITHUB_TAG_NAME=${GITHUB_REF##*/}
        export KUBEBUILDER_ASSETS=/usr/local/bin
        make docker-build
        make docker-push
        sudo make firewall-controller

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: bin/firewall-controller
        asset_name: firewall-controller
        asset_content_type: application/octet-stream

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: bin/firewall-controller.sha256
        asset_name: firewall-controller.sha256
        asset_content_type: application/octet-stream

    - name: Prepare upload
      run: |
        export GITHUB_TAG_NAME=${GITHUB_REF##*/}
        mkdir -p firewall-controller/${GITHUB_TAG_NAME}/
        sudo chown -R $(id -u):$(id -g) bin
        mv bin/* firewall-controller/${GITHUB_TAG_NAME}/

    - name: Upload image tarballs to GCS
      run: gsutil -m cp -r -p firewall-controller gs://$GCS_BUCKET
