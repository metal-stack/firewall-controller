// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metal-stack/firewall-controller/v2/pkg/nftables (interfaces: FQDNCache)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_fqdncache.go -package=mocks . FQDNCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v1 "github.com/metal-stack/firewall-controller/v2/api/v1"
	dns "github.com/metal-stack/firewall-controller/v2/pkg/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockFQDNCache is a mock of FQDNCache interface.
type MockFQDNCache struct {
	ctrl     *gomock.Controller
	recorder *MockFQDNCacheMockRecorder
	isgomock struct{}
}

// MockFQDNCacheMockRecorder is the mock recorder for MockFQDNCache.
type MockFQDNCacheMockRecorder struct {
	mock *MockFQDNCache
}

// NewMockFQDNCache creates a new mock instance.
func NewMockFQDNCache(ctrl *gomock.Controller) *MockFQDNCache {
	mock := &MockFQDNCache{ctrl: ctrl}
	mock.recorder = &MockFQDNCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFQDNCache) EXPECT() *MockFQDNCacheMockRecorder {
	return m.recorder
}

// CacheAddr mocks base method.
func (m *MockFQDNCache) CacheAddr() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheAddr")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CacheAddr indicates an expected call of CacheAddr.
func (mr *MockFQDNCacheMockRecorder) CacheAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheAddr", reflect.TypeOf((*MockFQDNCache)(nil).CacheAddr))
}

// GetSetsForFQDN mocks base method.
func (m *MockFQDNCache) GetSetsForFQDN(fqdn v1.FQDNSelector) []v1.IPSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetsForFQDN", fqdn)
	ret0, _ := ret[0].([]v1.IPSet)
	return ret0
}

// GetSetsForFQDN indicates an expected call of GetSetsForFQDN.
func (mr *MockFQDNCacheMockRecorder) GetSetsForFQDN(fqdn, fqdnSets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetsForFQDN", reflect.TypeOf((*MockFQDNCache)(nil).GetSetsForFQDN), fqdn, fqdnSets)
}

// GetSetsForRendering mocks base method.
func (m *MockFQDNCache) GetSetsForRendering(fqdns []v1.FQDNSelector) []dns.RenderIPSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetsForRendering", fqdns)
	ret0, _ := ret[0].([]dns.RenderIPSet)
	return ret0
}

// GetSetsForRendering indicates an expected call of GetSetsForRendering.
func (mr *MockFQDNCacheMockRecorder) GetSetsForRendering(fqdns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetsForRendering", reflect.TypeOf((*MockFQDNCache)(nil).GetSetsForRendering), fqdns)
}

// IsInitialized mocks base method.
func (m *MockFQDNCache) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockFQDNCacheMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockFQDNCache)(nil).IsInitialized))
}
